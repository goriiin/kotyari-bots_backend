services:
  api_integrations:
    image: postgres:17.5
    ports:
      - "54325:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${LOCAL_API_INT_DATABASE_USER}
      - POSTGRES_PASSWORD=${LOCAL_API_INT_DATABASE_PASSWORD}
      - POSTGRES_DB=${LOCAL_API_INT_DATABASE_NAME}
    volumes:
      - api_integrations_db_data:/var/lib/postgresql/data/
    container_name: api_integrations_db
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${LOCAL_API_INT_DATABASE_USER} -d ${LOCAL_API_INT_DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  aggregator:
    image: postgres:17.5
    ports:
      - "54326:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${LOCAL_AGGREGATOR_DATABASE_USER}
      - POSTGRES_PASSWORD=${LOCAL_AGGREGATOR_DATABASE_PASSWORD}
      - POSTGRES_DB=${LOCAL_AGGREGATOR_DATABASE_NAME}
    volumes:
      - aggregator_db_data:/var/lib/postgresql/data/
    container_name: aggregator_db
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${LOCAL_AGGREGATOR_DATABASE_USER} -d ${LOCAL_AGGREGATOR_DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,INTERNAL://kafka:29092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://kafka:9093,INTERNAL://0.0.0.0:29092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CLUSTER_ID: '6aa74627-ee8e-4b0c-ac0f-20c8ec74069f'

  reddit_go:
    build:
      context: .
      dockerfile: ./cmd/reddit/Dockerfile
    ports:
      - "8001:8001"
    image: reddit-go-image
    container_name: reddit_go
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy

      api_integrations:
        condition: service_healthy

  aggregator_go:
    build:
      context: .
      dockerfile: ./cmd/aggregator/Dockerfile
    ports:
      - "8000:8000"
    image: aggregator-go-image
    container_name: aggregator_go
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy

      api_integrations:
        condition: service_healthy

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    volumes:
      - ./alloy-config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: run /etc/alloy/config.alloy
    depends_on:
      - loki
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file:
      - .env
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_PASSWORD}
    depends_on:
      - loki
      - alloy
    networks:
      - app-network


volumes:
  api_integrations_db_data:
  aggregator_db_data:

networks:
  app-network:
    driver: bridge
