# /intranet/parser/main.py
from intranet.libs.redis import MockRedisClient, RedisClient
from intranet.parser.config import config
from intranet.parser.parsers.dzen import DzenParser

INITIAL_URLS_FOR_MOCK = [
    "https://dzen.ru/a/aIIhDlT2Qh9H9FOZ",
    "https://dzen.ru/a/aN4o2LNMgXBpOxFH"
]

PARSER_MAPPING = {
    "dzen": DzenParser,
}


class ParserOrchestrator:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –ø–∞—Ä—Å–∏–Ω–≥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
    """

    def __init__(self):
        if config.get('use_mock_redis'):
            mock_client = MockRedisClient()
            mock_client.seed_data(INITIAL_URLS_FOR_MOCK)
            self.redis_client = mock_client
        else:
            self.redis_client = RedisClient(
                host=config['redis']['host'],
                port=config['redis']['port'],
                processed_urls_key=config['redis'].get('processed_urls_key', 'processed_urls:zset'),
                username=config['redis'].get('user'),
                password=config['redis'].get('password')
            )
        print("–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–º (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º) —Ä–µ–∂–∏–º–µ.")

    def process_item(self, item_data: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç (–ø–æ—Å—Ç/—Å—Ç–∞—Ç—å—é) –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        url = item_data.get("source_url")
        if not url:
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–µ–∑ source_url, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ.")
            return

        self.redis_client.mark_as_processed(url)

        print("\n" + "=" * 70)
        print(f"–£–°–ü–ï–®–ù–û –°–ü–ê–†–°–ï–ù–ê –°–¢–ê–¢–¨–Ø")
        print(f"   –ó–ê–ì–û–õ–û–í–û–ö: {item_data.get('title')}")
        print(f"   URL: {url}")
        print(f"   –ö–û–ù–¢–ï–ù–¢ (–ø–µ—Ä–≤—ã–µ 150 —Å–∏–º–≤–æ–ª–æ–≤): {item_data.get('content', '')[:150].replace(chr(10), ' ')}...")
        print("=" * 70 + "\n")

    def run(self):
        """
        –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏.
        –ë–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.
        """
        topics = config.get('active_topics', [])

        print(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤: {', '.join(topics) if topics else '–ù–µ—Ç —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è'}")
        for message in self.redis_client.listen_for_messages(topics):
            topic = message['channel']
            target = message['data']
            parser_class = PARSER_MAPPING.get(topic)

            if not parser_class:
                print(f"–î–ª—è —Ç–æ–ø–∏–∫–∞ '{topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä—Å–µ—Ä. –ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                continue

            print(f"üîπ –í–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á–∞: {target}")
            parser_instance = None
            try:
                parser_instance = parser_class()
                results = parser_instance.parse(target)

                if isinstance(results, list):
                    for item in results:
                        if item.get("status") == "success":
                            self.process_item(item)
                elif isinstance(results, dict):
                    if results.get("status") == "success":
                        self.process_item(results)

            except Exception as e:
                print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {target}: {e}")
            finally:
                if hasattr(parser_instance, 'close'):
                    parser_instance.close()
                print(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {target}. –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π...")


if __name__ == "__main__":
    configured_topics = set(config.get('active_topics', []))
    registered_parsers = set(PARSER_MAPPING.keys())

    if not configured_topics.issubset(registered_parsers):
        missing = configured_topics - registered_parsers
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –í config.yml —É–∫–∞–∑–∞–Ω—ã —Ç–æ–ø–∏–∫–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø–∞—Ä—Å–µ—Ä–æ–≤: {missing}")
        exit(1)

    orchestrator = ParserOrchestrator()
    orchestrator.run()