openapi: 3.0.0
info:
  title: "Bots Service"
  description: "API для управления ботами, их профилями и задачами в рамках аккаунта."
  version: "1.0.0"
servers:
  - url: /api/v1
tags:
  - name: "Bots"
    description: "Операции над ботами, принадлежащими аккаунту."
  - name: "Bot-Profile Associations"
    description: "Управление связями между ботами и профилями."
  - name: "Tasks"
    description: "Создание и отслеживание асинхронных задач для ботов."

# --------------------------------------------------------------
# Компоненты API
# --------------------------------------------------------------
components:
  # -------------------- Безопасность --------------------
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session_id
    csrfAuth:
      type: apiKey
      in: header
      name: X-CSRF-Token

  # -------------------- Схемы данных --------------------
  schemas:
    Bot:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        systemPrompt:
          type: string
        moderationRequired:
          type: boolean
          default: false
        autoPublish:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - name
        - email
        - moderationRequired
        - autoPublish
        - createdAt
        - updatedAt

    BotInput:
      type: object
      description: "Данные для создания нового бота."
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        systemPrompt:
          type: string
        moderationRequired:
          type: boolean
          default: false
        autoPublish:
          type: boolean
          default: false
      required:
        - name
        - email

    BotUpdate:
      type: object
      description: "Данные для частичного обновления бота (для PATCH)."
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        systemPrompt:
          type: string
        moderationRequired:
          type: boolean
        autoPublish:
          type: boolean

    Profile:
      type: object
      description: "Представление профиля, связанного с ботом."
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
      required:
        - id
        - name
        - email

    Task:
      type: object
      description: "Асинхронная задача и её текущий статус."
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        botId:
          type: string
          format: uuid
          readOnly: true
        profileId:
          type: string
          format: uuid
          readOnly: true
        status:
          type: string
          enum: [pending, running, completed, failed]
        errorMessage:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - botId
        - profileId
        - status
        - createdAt
        - updatedAt

    TaskInput:
      type: object
      description: "Данные для создания новой задачи."
      properties:
        description:
          type: string
          description: "Описание задачи, которое будет скомбинировано с промптами."
      required:
        - description

    BotList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Bot'
        nextCursor:
          type: string
          nullable: true

    ProfileList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
        nextCursor:
          type: string
          nullable: true

    Error:
      type: object
      description: "Стандартизированная структура ошибки."
      properties:
        errorCode:
          type: string
          description: "Машиночитаемый код ошибки."
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: "Человекочитаемое сообщение об ошибке."
          example: "Одно или несколько полей не прошли валидацию."
        details:
          type: object
          additionalProperties:
            type: string
          description: "Дополнительные детали об ошибке, например, по полям."
          example:
            email: "Некорректный формат email."
      required:
        - errorCode
        - message

  # -------------------- Параметры --------------------
  parameters:
    BotID:
      name: botId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ProfileID:
      name: profileId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    TaskID:
      name: taskId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    PaginationCursor:
      name: cursor
      in: query
      description: "Курсор для получения следующей страницы результатов."
      schema:
        type: string
    PaginationLimit:
      name: limit
      in: query
      description: "Максимальное количество результатов на странице."
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  # -------------------- Ответы --------------------
  responses:
    AcceptedTask:
      description: "Задача принята в обработку. Заголовок 'Location' содержит URL для отслеживания статуса задачи."
      headers:
        Location:
          description: "Путь для получения статуса созданной задачи."
          schema:
            type: string
            example: "/api/v1/tasks/123e4567-e89b-12d3-a456-426614174000"
    NoContent:
      description: "Операция успешна, тело ответа отсутствует."
    BadRequest:
      description: "Некорректный запрос (Bad Request)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: "Ошибка аутентификации (Unauthorized)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: "Ресурс не найден (Not Found)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: "Конфликт (Conflict)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: "Внутренняя ошибка сервера (Internal Server Error)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

# --------------------------------------------------------------
# Глобальные требования безопасности
# --------------------------------------------------------------
security:
  - cookieAuth: []
  - csrfAuth: []

# --------------------------------------------------------------
# Пути (Эндпоинты) API
# --------------------------------------------------------------
paths:
  #--- Управление ботами ---
  /bots:
    get:
      summary: "Получить список своих ботов"
      operationId: "listMyBots"
      tags: ["Bots"]
      parameters:
        - $ref: '#/components/parameters/PaginationCursor'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: "Успешный ответ со списком ботов."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: "Создать нового бота"
      operationId: "createMyBot"
      tags: ["Bots"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotInput'
      responses:
        '201':
          description: "Бот успешно создан."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bots/{botId}:
    get:
      summary: "Получить бота по ID"
      operationId: "getBotById"
      tags: ["Bots"]
      parameters:
        - $ref: '#/components/parameters/BotID'
      responses:
        '200':
          description: "Успешный ответ с данными бота."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: "Полностью обновить бота по ID"
      operationId: "updateBotById"
      tags: ["Bots"]
      parameters:
        - $ref: '#/components/parameters/BotID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotInput'
      responses:
        '200':
          description: "Бот успешно обновлен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: "Удалить бота по ID"
      operationId: "deleteBotById"
      tags: ["Bots"]
      parameters:
        - $ref: '#/components/parameters/BotID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  #--- Управление связями ботов и профилей ---
  /bots/{botId}/profiles:
    get:
      summary: "Получить список профилей, привязанных к боту"
      operationId: "getBotProfiles"
      tags: ["Bot-Profile Associations"]
      parameters:
        - $ref: '#/components/parameters/BotID'
        - $ref: '#/components/parameters/PaginationCursor'
        - $ref: '#/components/parameters/PaginationLimit'
      responses:
        '200':
          description: "Успешный ответ со списком профилей."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bots/{botId}/profiles/{profileId}:
    put:
      summary: "Привязать профиль к боту"
      operationId: "addProfileToBot"
      tags: ["Bot-Profile Associations"]
      parameters:
        - $ref: '#/components/parameters/BotID'
        - $ref: '#/components/parameters/ProfileID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Не найден бот или профиль."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: "Отвязать профиль от бота"
      operationId: "removeProfileFromBot"
      tags: ["Bot-Profile Associations"]
      parameters:
        - $ref: '#/components/parameters/BotID'
        - $ref: '#/components/parameters/ProfileID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  #--- Управление задачами ---
  /bots/{botId}/profiles/{profileId}/tasks:
    post:
      summary: "Создать задачу для бота с конкретным профилем"
      operationId: "createTaskForBotWithProfile"
      tags: ["Tasks"]
      parameters:
        - $ref: '#/components/parameters/BotID'
        - $ref: '#/components/parameters/ProfileID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Не найден бот или профиль."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tasks/{taskId}:
    get:
      summary: "Получить статус задачи по ID"
      operationId: "getTaskById"
      tags: ["Tasks"]
      parameters:
        - $ref: '#/components/parameters/TaskID'
      responses:
        '200':
          description: "Успешный ответ со статусом задачи."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'