openapi: 3.0.0
info:
  title: "Posts Service"
  description: "API для работы с постами."
  version: "1.0.0"
servers:
  - url: http://localhost:8086
tags:
  - name: "Posts"
    description: "Операции для управления постами."

# --------------------------------------------------------------
# Компоненты API
# --------------------------------------------------------------
components:
  # -------------------- Безопасность --------------------
#  securitySchemes:
#    cookieAuth:
#      type: apiKey
#      in: cookie
#      name: session_id
#    csrfAuth:
#      type: apiKey
#      in: header
#      name: X-CSRF-Token

  # -------------------- Схемы данных --------------------
  schemas:
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "UUID категории"
        title:
          type: string
          description: "Название категории"
      required: [ id, title ]
      example:
        id: "b3eea15e-865c-462a-9b05-393b71954fc5"
        title: "C++"

    Post:
      type: object
      description: "Пост"
      properties:
        id:
          type: integer
          format: uint64
          readOnly: true
          description: "ID поста"
        botId:
          type: string
          format: uuid
          description: "ID бота, к которому привязан пост."
        profileId:
          type: string
          format: uuid
          description: "ID профиля, к которому относится пост."
        platform:
          type: string
          enum:
            - "otveti"
          description: "Платформа, для которой создавался пост"
        postType:
          nullable: true
          type: string
          enum:
            - "opinion"
            - "knowledge"
            - "history"
          description: "Тип поста"
        title:
          type: string
          description: "Название поста"
        text:
          type: string
          description: "Текстовое содержимое поста."
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          description: "Возвращается, если у поста есть категории"
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - id
        - botId
        - profileId
        - platform
        - title
        - text
        - createdAt
        - updatedAt
      example:
        id: "b046aea8-5692-46ab-bc51-7c479584bb36"
        botId: "b5ad6b0f-3c15-4130-8c4d-6c535bc49cd4"
        profileId: "d1aa90d8-70e4-4fd2-bbfa-84ee67154305"
        platform: "otveti"
        title: "Sample text title"
        text: "Sample post text"
        postType: "opinion"
        categories:
          - id: "b3eea15e-865c-462a-9b05-393b71954fc5"
            title: "C++"
          - id: "ac08780e-be4a-41df-a54a-58750b3c6b59"
            title: "Программирование"
        createdAt: "2023-10-27T10:00:00Z"
        updatedAt: "2023-10-27T11:30:00Z"

    PostInput:
      type: object
      description: "Данные для создания нового поста."
      properties:
        botId:
          type: string
          format: uuid
          description: "ID бота, который создает пост"
        profileIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          description: "Массив ID профилей, от имени которых создаются посты."
        taskText:
          type: string
          description: "Описание задачи для LLM"
        platform:
          type: string
          enum:
            - "otveti"
          description: "Платформа, для которой создается пост"
        postType:
          type: string
          nullable: true
          enum:
            - "opinion"
            - "knowledge"
            - "history"
          description: "Тип поста - обязательное поле для ответов, nullable для возможной поддержки других платформ"
        categoryIds:
          type: array
          nullable: true
          items:
            type: string
            format: uuid
          description: "UUID-ы категорий поста, обязательные для ответов, nullable для возможной поддержки других платформ"
      required:
        - botId
        - profileId
        - taskText
        - platform
      example:
        botId: "b046aea8-5692-46ab-bc51-7c479584bb36"
        profileId: "d1aa90d8-70e4-4fd2-bbfa-84ee67154305"
        taskText: "Пост про огурцы"
        platform: "otveti"
        postType: "opinion"
        categories:
          - id: "b3eea15e-865c-462a-9b05-393b71954fc5"
            title: "C++"
            createdAt: "2023-10-01T09:00:00Z"
            updatedAt: "2023-10-01T09:00:00Z"
          - id: "ac08780e-be4a-41df-a54a-58750b3c6b59"
            title: "Программирование"
            createdAt: "2023-10-01T09:00:00Z"
            updatedAt: "2023-10-01T09:00:00Z"
            
    PostUpdate:
      type: object
      description: "Данные для обновления поста."
      properties:
        title:
          type: string
          description: "Новый заголовок поста"
        text:
          type: string
          description: "Новое содержимое поста."
      required:
        - id
        - title
        - text

    PostList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'

    Error:
      type: object
      description: "Стандартизированная структура ошибки."
      properties:
        errorCode:
          type: integer
          format: uint16
          description: "HTTP error code"
          example: "500"
        message:
          type: string
          description: "Человекочитаемое сообщение об ошибке."
          example: "Одно или несколько полей не прошли валидацию."
        details:
          type: object
          additionalProperties:
            type: string
          description: "Дополнительные детали об ошибке, например, по полям."
          example:
            text: "Поле не может быть пустым."
      required:
        - errorCode
        - message

  # -------------------- Параметры --------------------
  parameters:
    PostID:
      name: postId
      in: path
      required: true
      description: "Уникальный идентификатор поста."
      schema:
        type: integer
        format: uuid

  # -------------------- Ответы --------------------
  responses:
    NoContent:
      description: "Операция успешна, тело ответа отсутствует."
    BadRequest:
      description: "Некорректный запрос (Bad Request)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: "Ошибка аутентификации (Unauthorized)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: "Ресурс не найден (Not Found)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: "Внутренняя ошибка сервера (Internal Server Error)."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

# --------------------------------------------------------------
# Глобальные требования безопасности
# --------------------------------------------------------------
#security:
#  - cookieAuth: []
#  - csrfAuth: []

# --------------------------------------------------------------
# Пути (Эндпоинты) API
# --------------------------------------------------------------
paths:
  /api/v1/posts:
    get:
      summary: "Получить список постов"
      operationId: "listPosts"
      tags: ["Posts"]
      responses:
        '200':
          description: "Успешный ответ со списком постов."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: "Создать новые посты"
      operationId: "createPost"
      tags: ["Posts"]
      requestBody:
        required: true
        description: "Данные для нового поста."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: "Посты успешно создан."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Указанный пост не найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/posts/seo:
    post:
      summary: "Создать новый пост по SEO"
      operationId: "createPostSEO"
      tags: [ "Posts" ]
      requestBody:
        required: true
        description: "Данные для нового поста."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostInput'
      responses:
        '201':
          description: "Пост успешно создан."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: "Указанный пост не найден."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/posts/{postId}:
    get:
      summary: "Получить пост по ID"
      operationId: "getPostById"
      tags: ["Posts"]
      parameters:
        - $ref: '#/components/parameters/PostID'
      responses:
        '200':
          description: "Успешный ответ с данными поста."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: "Обновить пост по ID"
      operationId: "updatePostById"
      tags: ["Posts"]
      parameters:
        - $ref: '#/components/parameters/PostID'
      requestBody:
        required: true
        description: "Новые данные для поста."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUpdate'
      responses:
        '200':
          description: "Пост успешно обновлен."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: "Удалить пост по ID"
      operationId: "deletePostById"
      tags: ["Posts"]
      parameters:
        - $ref: '#/components/parameters/PostID'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'