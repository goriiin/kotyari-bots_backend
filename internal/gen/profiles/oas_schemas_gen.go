// Code generated by ogen, DO NOT EDIT.

package profiles

import (
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

type CreateMyProfileBadRequest Error

func (*CreateMyProfileBadRequest) createMyProfileRes() {}

type CreateMyProfileConflict Error

func (*CreateMyProfileConflict) createMyProfileRes() {}

type CreateMyProfileInternalServerError Error

func (*CreateMyProfileInternalServerError) createMyProfileRes() {}

type CreateMyProfileUnauthorized Error

func (*CreateMyProfileUnauthorized) createMyProfileRes() {}

type DeleteProfileByIdInternalServerError Error

func (*DeleteProfileByIdInternalServerError) deleteProfileByIdRes() {}

type DeleteProfileByIdNotFound Error

func (*DeleteProfileByIdNotFound) deleteProfileByIdRes() {}

type DeleteProfileByIdUnauthorized Error

func (*DeleteProfileByIdUnauthorized) deleteProfileByIdRes() {}

// Стандартизированная структура ошибки.
// Ref: #/components/schemas/Error
type Error struct {
	// Машиночитаемый код ошибки.
	ErrorCode string `json:"errorCode"`
	// Человекочитаемое сообщение об ошибке.
	Message string `json:"message"`
	// Дополнительные детали об ошибке, например, по полям.
	Details OptErrorDetails `json:"details"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *Error) GetErrorCode() string {
	return s.ErrorCode
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() OptErrorDetails {
	return s.Details
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val string) {
	s.ErrorCode = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val OptErrorDetails) {
	s.Details = val
}

// Дополнительные детали об ошибке, например, по полям.
type ErrorDetails map[string]jx.Raw

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type GetProfileByIdInternalServerError Error

func (*GetProfileByIdInternalServerError) getProfileByIdRes() {}

type GetProfileByIdNotFound Error

func (*GetProfileByIdNotFound) getProfileByIdRes() {}

type GetProfileByIdUnauthorized Error

func (*GetProfileByIdUnauthorized) getProfileByIdRes() {}

type ListMyProfilesInternalServerError Error

func (*ListMyProfilesInternalServerError) listMyProfilesRes() {}

type ListMyProfilesUnauthorized Error

func (*ListMyProfilesUnauthorized) listMyProfilesRes() {}

// Ref: #/components/responses/NoContent
type NoContent struct{}

func (*NoContent) deleteProfileByIdRes() {}

// NewOptErrorDetails returns new OptErrorDetails with value set to v.
func NewOptErrorDetails(v ErrorDetails) OptErrorDetails {
	return OptErrorDetails{
		Value: v,
		Set:   true,
	}
}

// OptErrorDetails is optional ErrorDetails.
type OptErrorDetails struct {
	Value ErrorDetails
	Set   bool
}

// IsSet returns true if OptErrorDetails was set.
func (o OptErrorDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorDetails) Reset() {
	var v ErrorDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorDetails) SetTo(v ErrorDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorDetails) Get() (v ErrorDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorDetails) Or(d ErrorDetails) ErrorDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Профиль пользователя, содержащий персональные
// настройки.
// Ref: #/components/schemas/Profile
type Profile struct {
	// Уникальный идентификатор профиля.
	ID uuid.UUID `json:"id"`
	// Имя пользователя в профиле.
	Name string `json:"name"`
	// Контактная электронная почта (уникальная в рамках
	// системы).
	Email string `json:"email"`
	// Системный промпт для AI.
	Prompt OptString `json:"prompt"`
	// Время создания профиля.
	CreatedAt time.Time `json:"createdAt"`
	// Время последнего обновления профиля.
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Profile) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Profile) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *Profile) GetEmail() string {
	return s.Email
}

// GetPrompt returns the value of Prompt.
func (s *Profile) GetPrompt() OptString {
	return s.Prompt
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Profile) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Profile) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Profile) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Profile) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *Profile) SetEmail(val string) {
	s.Email = val
}

// SetPrompt sets the value of Prompt.
func (s *Profile) SetPrompt(val OptString) {
	s.Prompt = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Profile) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Profile) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*Profile) createMyProfileRes()   {}
func (*Profile) getProfileByIdRes()    {}
func (*Profile) updateProfileByIdRes() {}

// Данные для создания или обновления профиля.
// Ref: #/components/schemas/ProfileInput
type ProfileInput struct {
	// Имя пользователя.
	Name string `json:"name"`
	// Электронная почта пользователя.
	Email string `json:"email"`
	// Системный промпт для AI.
	Prompt OptString `json:"prompt"`
}

// GetName returns the value of Name.
func (s *ProfileInput) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *ProfileInput) GetEmail() string {
	return s.Email
}

// GetPrompt returns the value of Prompt.
func (s *ProfileInput) GetPrompt() OptString {
	return s.Prompt
}

// SetName sets the value of Name.
func (s *ProfileInput) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *ProfileInput) SetEmail(val string) {
	s.Email = val
}

// SetPrompt sets the value of Prompt.
func (s *ProfileInput) SetPrompt(val OptString) {
	s.Prompt = val
}

// Пагинированный список профилей.
// Ref: #/components/schemas/ProfileList
type ProfileList struct {
	Data []Profile `json:"data"`
	// Курсор для запроса следующей страницы. null, если это
	// последняя страница.
	NextCursor OptNilString `json:"nextCursor"`
}

// GetData returns the value of Data.
func (s *ProfileList) GetData() []Profile {
	return s.Data
}

// GetNextCursor returns the value of NextCursor.
func (s *ProfileList) GetNextCursor() OptNilString {
	return s.NextCursor
}

// SetData sets the value of Data.
func (s *ProfileList) SetData(val []Profile) {
	s.Data = val
}

// SetNextCursor sets the value of NextCursor.
func (s *ProfileList) SetNextCursor(val OptNilString) {
	s.NextCursor = val
}

func (*ProfileList) listMyProfilesRes() {}

type UpdateProfileByIdBadRequest Error

func (*UpdateProfileByIdBadRequest) updateProfileByIdRes() {}

type UpdateProfileByIdConflict Error

func (*UpdateProfileByIdConflict) updateProfileByIdRes() {}

type UpdateProfileByIdInternalServerError Error

func (*UpdateProfileByIdInternalServerError) updateProfileByIdRes() {}

type UpdateProfileByIdNotFound Error

func (*UpdateProfileByIdNotFound) updateProfileByIdRes() {}

type UpdateProfileByIdUnauthorized Error

func (*UpdateProfileByIdUnauthorized) updateProfileByIdRes() {}
