// Code generated by ogen, DO NOT EDIT.

package profiles

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateProfile implements createProfile operation.
	//
	// Создать новый профиль.
	//
	// POST /profile/
	CreateProfile(ctx context.Context, req *ProfileInput) (CreateProfileRes, error)
	// DeleteProfileByEmail implements deleteProfileByEmail operation.
	//
	// Удалить профиль по email.
	//
	// DELETE /profile/email/{email}
	DeleteProfileByEmail(ctx context.Context, params DeleteProfileByEmailParams) (DeleteProfileByEmailRes, error)
	// DeleteProfileById implements deleteProfileById operation.
	//
	// Удалить профиль по ID.
	//
	// DELETE /profile/id/{id}
	DeleteProfileById(ctx context.Context, params DeleteProfileByIdParams) (DeleteProfileByIdRes, error)
	// GetProfileByEmail implements getProfileByEmail operation.
	//
	// Получить профиль по email.
	//
	// GET /profile/email/{email}
	GetProfileByEmail(ctx context.Context, params GetProfileByEmailParams) (GetProfileByEmailRes, error)
	// GetProfileById implements getProfileById operation.
	//
	// Получить профиль по ID.
	//
	// GET /profile/id/{id}
	GetProfileById(ctx context.Context, params GetProfileByIdParams) (GetProfileByIdRes, error)
	// ListProfiles implements listProfiles operation.
	//
	// Получить список всех профилей.
	//
	// GET /profiles
	ListProfiles(ctx context.Context) (ListProfilesRes, error)
	// UpdateProfileByEmail implements updateProfileByEmail operation.
	//
	// Обновить профиль по email.
	//
	// PUT /profile/email/{email}
	UpdateProfileByEmail(ctx context.Context, req *ProfileInput, params UpdateProfileByEmailParams) (UpdateProfileByEmailRes, error)
	// UpdateProfileById implements updateProfileById operation.
	//
	// Обновить профиль по ID.
	//
	// PUT /profile/id/{id}
	UpdateProfileById(ctx context.Context, req *ProfileInput, params UpdateProfileByIdParams) (UpdateProfileByIdRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
