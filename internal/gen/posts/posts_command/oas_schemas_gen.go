// Code generated by ogen, DO NOT EDIT.

package posts_command

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"
)

// Ref: #/Category
type Category struct {
	// UUID категории.
	ID uuid.UUID `json:"id"`
	// Название категории.
	Title string `json:"title"`
}

// GetID returns the value of ID.
func (s *Category) GetID() uuid.UUID {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *Category) GetTitle() string {
	return s.Title
}

// SetID sets the value of ID.
func (s *Category) SetID(val uuid.UUID) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *Category) SetTitle(val string) {
	s.Title = val
}

type CreatePostBadRequest Error

func (*CreatePostBadRequest) createPostRes() {}

type CreatePostInternalServerError Error

func (*CreatePostInternalServerError) createPostRes() {}

type CreatePostUnauthorized Error

func (*CreatePostUnauthorized) createPostRes() {}

type DeletePostByIdInternalServerError Error

func (*DeletePostByIdInternalServerError) deletePostByIdRes() {}

type DeletePostByIdNotFound Error

func (*DeletePostByIdNotFound) deletePostByIdRes() {}

type DeletePostByIdUnauthorized Error

func (*DeletePostByIdUnauthorized) deletePostByIdRes() {}

// Стандартизированная структура ошибки.
// Ref: #/Error
type Error struct {
	// HTTP error code.
	ErrorCode uint16 `json:"errorCode"`
	// Человекочитаемое сообщение об ошибке.
	Message string `json:"message"`
	// Дополнительные детали об ошибке, например, по полям.
	Details OptErrorDetails `json:"details"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *Error) GetErrorCode() uint16 {
	return s.ErrorCode
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() OptErrorDetails {
	return s.Details
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val uint16) {
	s.ErrorCode = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val OptErrorDetails) {
	s.Details = val
}

// Дополнительные детали об ошибке, например, по полям.
type ErrorDetails map[string]string

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/NoContent
type NoContent struct{}

func (*NoContent) deletePostByIdRes() {}

// NewOptErrorDetails returns new OptErrorDetails with value set to v.
func NewOptErrorDetails(v ErrorDetails) OptErrorDetails {
	return OptErrorDetails{
		Value: v,
		Set:   true,
	}
}

// OptErrorDetails is optional ErrorDetails.
type OptErrorDetails struct {
	Value ErrorDetails
	Set   bool
}

// IsSet returns true if OptErrorDetails was set.
func (o OptErrorDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorDetails) Reset() {
	var v ErrorDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorDetails) SetTo(v ErrorDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorDetails) Get() (v ErrorDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorDetails) Or(d ErrorDetails) ErrorDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPostInputPostType returns new OptNilPostInputPostType with value set to v.
func NewOptNilPostInputPostType(v PostInputPostType) OptNilPostInputPostType {
	return OptNilPostInputPostType{
		Value: v,
		Set:   true,
	}
}

// OptNilPostInputPostType is optional nullable PostInputPostType.
type OptNilPostInputPostType struct {
	Value PostInputPostType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPostInputPostType was set.
func (o OptNilPostInputPostType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPostInputPostType) Reset() {
	var v PostInputPostType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPostInputPostType) SetTo(v PostInputPostType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPostInputPostType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPostInputPostType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PostInputPostType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPostInputPostType) Get() (v PostInputPostType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPostInputPostType) Or(d PostInputPostType) PostInputPostType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPostPostType returns new OptNilPostPostType with value set to v.
func NewOptNilPostPostType(v PostPostType) OptNilPostPostType {
	return OptNilPostPostType{
		Value: v,
		Set:   true,
	}
}

// OptNilPostPostType is optional nullable PostPostType.
type OptNilPostPostType struct {
	Value PostPostType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPostPostType was set.
func (o OptNilPostPostType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPostPostType) Reset() {
	var v PostPostType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPostPostType) SetTo(v PostPostType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilPostPostType) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilPostPostType) SetToNull() {
	o.Set = true
	o.Null = true
	var v PostPostType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPostPostType) Get() (v PostPostType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPostPostType) Or(d PostPostType) PostPostType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUIDArray returns new OptNilUUIDArray with value set to v.
func NewOptNilUUIDArray(v []uuid.UUID) OptNilUUIDArray {
	return OptNilUUIDArray{
		Value: v,
		Set:   true,
	}
}

// OptNilUUIDArray is optional nullable []uuid.UUID.
type OptNilUUIDArray struct {
	Value []uuid.UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUIDArray was set.
func (o OptNilUUIDArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUIDArray) Reset() {
	var v []uuid.UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUIDArray) SetTo(v []uuid.UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilUUIDArray) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilUUIDArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []uuid.UUID
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUIDArray) Get() (v []uuid.UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUIDArray) Or(d []uuid.UUID) []uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Пост.
// Ref: #/Post
type Post struct {
	// ID поста.
	ID uuid.UUID `json:"id"`
	// Опциональный ID ответов.
	OtvetiId uint64 `json:"otvetiId"`
	// ID бота, к которому привязан пост.
	BotId uuid.UUID `json:"botId"`
	// ID профиля, к которому относится пост.
	ProfileId uuid.UUID `json:"profileId"`
	// Платформа, для которой создавался пост.
	Platform PostPlatform `json:"platform"`
	// Тип поста.
	PostType OptNilPostPostType `json:"postType"`
	// Название поста.
	Title string `json:"title"`
	// Текстовое содержимое поста.
	Text string `json:"text"`
	// Возвращается, если у поста есть категории.
	Categories []Category `json:"categories"`
	CreatedAt  time.Time  `json:"createdAt"`
	UpdatedAt  time.Time  `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Post) GetID() uuid.UUID {
	return s.ID
}

// GetOtvetiId returns the value of OtvetiId.
func (s *Post) GetOtvetiId() uint64 {
	return s.OtvetiId
}

// GetBotId returns the value of BotId.
func (s *Post) GetBotId() uuid.UUID {
	return s.BotId
}

// GetProfileId returns the value of ProfileId.
func (s *Post) GetProfileId() uuid.UUID {
	return s.ProfileId
}

// GetPlatform returns the value of Platform.
func (s *Post) GetPlatform() PostPlatform {
	return s.Platform
}

// GetPostType returns the value of PostType.
func (s *Post) GetPostType() OptNilPostPostType {
	return s.PostType
}

// GetTitle returns the value of Title.
func (s *Post) GetTitle() string {
	return s.Title
}

// GetText returns the value of Text.
func (s *Post) GetText() string {
	return s.Text
}

// GetCategories returns the value of Categories.
func (s *Post) GetCategories() []Category {
	return s.Categories
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Post) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Post) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Post) SetID(val uuid.UUID) {
	s.ID = val
}

// SetOtvetiId sets the value of OtvetiId.
func (s *Post) SetOtvetiId(val uint64) {
	s.OtvetiId = val
}

// SetBotId sets the value of BotId.
func (s *Post) SetBotId(val uuid.UUID) {
	s.BotId = val
}

// SetProfileId sets the value of ProfileId.
func (s *Post) SetProfileId(val uuid.UUID) {
	s.ProfileId = val
}

// SetPlatform sets the value of Platform.
func (s *Post) SetPlatform(val PostPlatform) {
	s.Platform = val
}

// SetPostType sets the value of PostType.
func (s *Post) SetPostType(val OptNilPostPostType) {
	s.PostType = val
}

// SetTitle sets the value of Title.
func (s *Post) SetTitle(val string) {
	s.Title = val
}

// SetText sets the value of Text.
func (s *Post) SetText(val string) {
	s.Text = val
}

// SetCategories sets the value of Categories.
func (s *Post) SetCategories(val []Category) {
	s.Categories = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Post) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Post) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*Post) updatePostByIdRes() {}

// Данные для создания нового поста.
// Ref: #/PostInput
type PostInput struct {
	// ID бота, который создает пост.
	BotId uuid.UUID `json:"botId"`
	// Массив ID профилей, от имени которых создаются посты.
	ProfileIds []uuid.UUID `json:"profileIds"`
	// Описание задачи для LLM.
	TaskText string `json:"taskText"`
	// Платформа, для которой создается пост.
	Platform PostInputPlatform `json:"platform"`
	// Тип поста - обязательное поле для ответов, nullable для
	// возможной поддержки других платформ.
	PostType OptNilPostInputPostType `json:"postType"`
	// UUID-ы категорий поста, обязательные для ответов, nullable
	// для возможной поддержки других платформ.
	CategoryIds OptNilUUIDArray `json:"categoryIds"`
}

// GetBotId returns the value of BotId.
func (s *PostInput) GetBotId() uuid.UUID {
	return s.BotId
}

// GetProfileIds returns the value of ProfileIds.
func (s *PostInput) GetProfileIds() []uuid.UUID {
	return s.ProfileIds
}

// GetTaskText returns the value of TaskText.
func (s *PostInput) GetTaskText() string {
	return s.TaskText
}

// GetPlatform returns the value of Platform.
func (s *PostInput) GetPlatform() PostInputPlatform {
	return s.Platform
}

// GetPostType returns the value of PostType.
func (s *PostInput) GetPostType() OptNilPostInputPostType {
	return s.PostType
}

// GetCategoryIds returns the value of CategoryIds.
func (s *PostInput) GetCategoryIds() OptNilUUIDArray {
	return s.CategoryIds
}

// SetBotId sets the value of BotId.
func (s *PostInput) SetBotId(val uuid.UUID) {
	s.BotId = val
}

// SetProfileIds sets the value of ProfileIds.
func (s *PostInput) SetProfileIds(val []uuid.UUID) {
	s.ProfileIds = val
}

// SetTaskText sets the value of TaskText.
func (s *PostInput) SetTaskText(val string) {
	s.TaskText = val
}

// SetPlatform sets the value of Platform.
func (s *PostInput) SetPlatform(val PostInputPlatform) {
	s.Platform = val
}

// SetPostType sets the value of PostType.
func (s *PostInput) SetPostType(val OptNilPostInputPostType) {
	s.PostType = val
}

// SetCategoryIds sets the value of CategoryIds.
func (s *PostInput) SetCategoryIds(val OptNilUUIDArray) {
	s.CategoryIds = val
}

// Платформа, для которой создается пост.
type PostInputPlatform string

const (
	PostInputPlatformOtveti PostInputPlatform = "otveti"
)

// AllValues returns all PostInputPlatform values.
func (PostInputPlatform) AllValues() []PostInputPlatform {
	return []PostInputPlatform{
		PostInputPlatformOtveti,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostInputPlatform) MarshalText() ([]byte, error) {
	switch s {
	case PostInputPlatformOtveti:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostInputPlatform) UnmarshalText(data []byte) error {
	switch PostInputPlatform(data) {
	case PostInputPlatformOtveti:
		*s = PostInputPlatformOtveti
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип поста - обязательное поле для ответов, nullable для
// возможной поддержки других платформ.
type PostInputPostType string

const (
	PostInputPostTypeOpinion   PostInputPostType = "opinion"
	PostInputPostTypeKnowledge PostInputPostType = "knowledge"
	PostInputPostTypeHistory   PostInputPostType = "history"
)

// AllValues returns all PostInputPostType values.
func (PostInputPostType) AllValues() []PostInputPostType {
	return []PostInputPostType{
		PostInputPostTypeOpinion,
		PostInputPostTypeKnowledge,
		PostInputPostTypeHistory,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostInputPostType) MarshalText() ([]byte, error) {
	switch s {
	case PostInputPostTypeOpinion:
		return []byte(s), nil
	case PostInputPostTypeKnowledge:
		return []byte(s), nil
	case PostInputPostTypeHistory:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostInputPostType) UnmarshalText(data []byte) error {
	switch PostInputPostType(data) {
	case PostInputPostTypeOpinion:
		*s = PostInputPostTypeOpinion
		return nil
	case PostInputPostTypeKnowledge:
		*s = PostInputPostTypeKnowledge
		return nil
	case PostInputPostTypeHistory:
		*s = PostInputPostTypeHistory
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/PostList
type PostList struct {
	Data []Post `json:"data"`
}

// GetData returns the value of Data.
func (s *PostList) GetData() []Post {
	return s.Data
}

// SetData sets the value of Data.
func (s *PostList) SetData(val []Post) {
	s.Data = val
}

func (*PostList) createPostRes() {}

// Платформа, для которой создавался пост.
type PostPlatform string

const (
	PostPlatformOtveti PostPlatform = "otveti"
)

// AllValues returns all PostPlatform values.
func (PostPlatform) AllValues() []PostPlatform {
	return []PostPlatform{
		PostPlatformOtveti,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostPlatform) MarshalText() ([]byte, error) {
	switch s {
	case PostPlatformOtveti:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostPlatform) UnmarshalText(data []byte) error {
	switch PostPlatform(data) {
	case PostPlatformOtveti:
		*s = PostPlatformOtveti
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Тип поста.
type PostPostType string

const (
	PostPostTypeOpinion   PostPostType = "opinion"
	PostPostTypeKnowledge PostPostType = "knowledge"
	PostPostTypeHistory   PostPostType = "history"
)

// AllValues returns all PostPostType values.
func (PostPostType) AllValues() []PostPostType {
	return []PostPostType{
		PostPostTypeOpinion,
		PostPostTypeKnowledge,
		PostPostTypeHistory,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PostPostType) MarshalText() ([]byte, error) {
	switch s {
	case PostPostTypeOpinion:
		return []byte(s), nil
	case PostPostTypeKnowledge:
		return []byte(s), nil
	case PostPostTypeHistory:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PostPostType) UnmarshalText(data []byte) error {
	switch PostPostType(data) {
	case PostPostTypeOpinion:
		*s = PostPostTypeOpinion
		return nil
	case PostPostTypeKnowledge:
		*s = PostPostTypeKnowledge
		return nil
	case PostPostTypeHistory:
		*s = PostPostTypeHistory
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Данные для обновления поста.
// Ref: #/PostUpdate
type PostUpdate struct {
	// Новый заголовок поста.
	Title string `json:"title"`
	// Новое содержимое поста.
	Text string `json:"text"`
}

// GetTitle returns the value of Title.
func (s *PostUpdate) GetTitle() string {
	return s.Title
}

// GetText returns the value of Text.
func (s *PostUpdate) GetText() string {
	return s.Text
}

// SetTitle sets the value of Title.
func (s *PostUpdate) SetTitle(val string) {
	s.Title = val
}

// SetText sets the value of Text.
func (s *PostUpdate) SetText(val string) {
	s.Text = val
}

type UpdatePostByIdBadRequest Error

func (*UpdatePostByIdBadRequest) updatePostByIdRes() {}

type UpdatePostByIdInternalServerError Error

func (*UpdatePostByIdInternalServerError) updatePostByIdRes() {}

type UpdatePostByIdNotFound Error

func (*UpdatePostByIdNotFound) updatePostByIdRes() {}

type UpdatePostByIdUnauthorized Error

func (*UpdatePostByIdUnauthorized) updatePostByIdRes() {}
