// Code generated by ogen, DO NOT EDIT.

package posts

import (
	"time"

	"github.com/google/uuid"
)

type CreatePostBadRequest Error

func (*CreatePostBadRequest) createPostRes() {}

type CreatePostInternalServerError Error

func (*CreatePostInternalServerError) createPostRes() {}

type CreatePostNotFound Error

func (*CreatePostNotFound) createPostRes() {}

type CreatePostSEOBadRequest Error

func (*CreatePostSEOBadRequest) createPostSEORes() {}

type CreatePostSEOInternalServerError Error

func (*CreatePostSEOInternalServerError) createPostSEORes() {}

type CreatePostSEONotFound Error

func (*CreatePostSEONotFound) createPostSEORes() {}

type CreatePostSEOUnauthorized Error

func (*CreatePostSEOUnauthorized) createPostSEORes() {}

type CreatePostUnauthorized Error

func (*CreatePostUnauthorized) createPostRes() {}

type DeletePostByIdInternalServerError Error

func (*DeletePostByIdInternalServerError) deletePostByIdRes() {}

type DeletePostByIdNotFound Error

func (*DeletePostByIdNotFound) deletePostByIdRes() {}

type DeletePostByIdUnauthorized Error

func (*DeletePostByIdUnauthorized) deletePostByIdRes() {}

// Стандартизированная структура ошибки.
// Ref: #/components/schemas/Error
type Error struct {
	// Машиночитаемый код ошибки.
	ErrorCode string `json:"errorCode"`
	// Человекочитаемое сообщение об ошибке.
	Message string `json:"message"`
	// Дополнительные детали об ошибке, например, по полям.
	Details OptErrorDetails `json:"details"`
}

// GetErrorCode returns the value of ErrorCode.
func (s *Error) GetErrorCode() string {
	return s.ErrorCode
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() OptErrorDetails {
	return s.Details
}

// SetErrorCode sets the value of ErrorCode.
func (s *Error) SetErrorCode(val string) {
	s.ErrorCode = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val OptErrorDetails) {
	s.Details = val
}

// Дополнительные детали об ошибке, например, по полям.
type ErrorDetails map[string]string

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type GetPostByIdInternalServerError Error

func (*GetPostByIdInternalServerError) getPostByIdRes() {}

type GetPostByIdNotFound Error

func (*GetPostByIdNotFound) getPostByIdRes() {}

type GetPostByIdUnauthorized Error

func (*GetPostByIdUnauthorized) getPostByIdRes() {}

type ListPostsInternalServerError Error

func (*ListPostsInternalServerError) listPostsRes() {}

type ListPostsUnauthorized Error

func (*ListPostsUnauthorized) listPostsRes() {}

// Ref: #/components/responses/NoContent
type NoContent struct{}

func (*NoContent) deletePostByIdRes() {}

// NewOptErrorDetails returns new OptErrorDetails with value set to v.
func NewOptErrorDetails(v ErrorDetails) OptErrorDetails {
	return OptErrorDetails{
		Value: v,
		Set:   true,
	}
}

// OptErrorDetails is optional ErrorDetails.
type OptErrorDetails struct {
	Value ErrorDetails
	Set   bool
}

// IsSet returns true if OptErrorDetails was set.
func (o OptErrorDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorDetails) Reset() {
	var v ErrorDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorDetails) SetTo(v ErrorDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorDetails) Get() (v ErrorDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorDetails) Or(d ErrorDetails) ErrorDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Пост.
// Ref: #/components/schemas/Post
type Post struct {
	// ID поста.
	ID uuid.UUID `json:"id"`
	// ID бота, к которому привязан пост.
	BotId OptUUID `json:"botId"`
	// ID профиля, к которому относится пост.
	ProfileId uuid.UUID `json:"profileId"`
	// Текстовое содержимое поста.
	Text      string    `json:"text"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Post) GetID() uuid.UUID {
	return s.ID
}

// GetBotId returns the value of BotId.
func (s *Post) GetBotId() OptUUID {
	return s.BotId
}

// GetProfileId returns the value of ProfileId.
func (s *Post) GetProfileId() uuid.UUID {
	return s.ProfileId
}

// GetText returns the value of Text.
func (s *Post) GetText() string {
	return s.Text
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Post) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Post) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Post) SetID(val uuid.UUID) {
	s.ID = val
}

// SetBotId sets the value of BotId.
func (s *Post) SetBotId(val OptUUID) {
	s.BotId = val
}

// SetProfileId sets the value of ProfileId.
func (s *Post) SetProfileId(val uuid.UUID) {
	s.ProfileId = val
}

// SetText sets the value of Text.
func (s *Post) SetText(val string) {
	s.Text = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Post) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Post) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*Post) createPostRes()     {}
func (*Post) createPostSEORes()  {}
func (*Post) getPostByIdRes()    {}
func (*Post) updatePostByIdRes() {}

// Данные для создания нового поста.
// Ref: #/components/schemas/PostInput
type PostInput struct {
	// ID бота, который создает пост.
	BotId uuid.UUID `json:"botId"`
	// Массив ID профилей, от имени которых создаются посты.
	ProfileIds []uuid.UUID `json:"profileIds"`
	// Описание задачи для LLM.
	TaskText string `json:"taskText"`
}

// GetBotId returns the value of BotId.
func (s *PostInput) GetBotId() uuid.UUID {
	return s.BotId
}

// GetProfileIds returns the value of ProfileIds.
func (s *PostInput) GetProfileIds() []uuid.UUID {
	return s.ProfileIds
}

// GetTaskText returns the value of TaskText.
func (s *PostInput) GetTaskText() string {
	return s.TaskText
}

// SetBotId sets the value of BotId.
func (s *PostInput) SetBotId(val uuid.UUID) {
	s.BotId = val
}

// SetProfileIds sets the value of ProfileIds.
func (s *PostInput) SetProfileIds(val []uuid.UUID) {
	s.ProfileIds = val
}

// SetTaskText sets the value of TaskText.
func (s *PostInput) SetTaskText(val string) {
	s.TaskText = val
}

// Ref: #/components/schemas/PostList
type PostList struct {
	Data []Post `json:"data"`
}

// GetData returns the value of Data.
func (s *PostList) GetData() []Post {
	return s.Data
}

// SetData sets the value of Data.
func (s *PostList) SetData(val []Post) {
	s.Data = val
}

func (*PostList) listPostsRes() {}

// Данные для обновления поста.
// Ref: #/components/schemas/PostUpdate
type PostUpdate struct {
	// ID поста.
	ID OptUUID `json:"id"`
	// Новое содержимое поста.
	Text string `json:"text"`
}

// GetID returns the value of ID.
func (s *PostUpdate) GetID() OptUUID {
	return s.ID
}

// GetText returns the value of Text.
func (s *PostUpdate) GetText() string {
	return s.Text
}

// SetID sets the value of ID.
func (s *PostUpdate) SetID(val OptUUID) {
	s.ID = val
}

// SetText sets the value of Text.
func (s *PostUpdate) SetText(val string) {
	s.Text = val
}

type UpdatePostByIdBadRequest Error

func (*UpdatePostByIdBadRequest) updatePostByIdRes() {}

type UpdatePostByIdInternalServerError Error

func (*UpdatePostByIdInternalServerError) updatePostByIdRes() {}

type UpdatePostByIdNotFound Error

func (*UpdatePostByIdNotFound) updatePostByIdRes() {}

type UpdatePostByIdUnauthorized Error

func (*UpdatePostByIdUnauthorized) updatePostByIdRes() {}
