// Code generated by ogen, DO NOT EDIT.

package posts

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreatePost implements createPost operation.
	//
	// Создать новые посты.
	//
	// POST /api/v1/posts
	CreatePost(ctx context.Context, req *PostInput) (CreatePostRes, error)
	// CreatePostSEO implements createPostSEO operation.
	//
	// Создать новый пост по SEO.
	//
	// POST /api/v1/posts/seo
	CreatePostSEO(ctx context.Context, req *PostInput) (CreatePostSEORes, error)
	// DeletePostById implements deletePostById operation.
	//
	// Удалить пост по ID.
	//
	// DELETE /api/v1/posts/{postId}
	DeletePostById(ctx context.Context, params DeletePostByIdParams) (DeletePostByIdRes, error)
	// GetPostById implements getPostById operation.
	//
	// Получить пост по ID.
	//
	// GET /api/v1/posts/{postId}
	GetPostById(ctx context.Context, params GetPostByIdParams) (GetPostByIdRes, error)
	// ListPosts implements listPosts operation.
	//
	// Получить список постов.
	//
	// GET /api/v1/posts
	ListPosts(ctx context.Context) (ListPostsRes, error)
	// UpdatePostById implements updatePostById operation.
	//
	// Обновить пост по ID.
	//
	// PUT /api/v1/posts/{postId}
	UpdatePostById(ctx context.Context, req *PostUpdate, params UpdatePostByIdParams) (UpdatePostByIdRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
