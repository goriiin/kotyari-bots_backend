// Code generated by ogen, DO NOT EDIT.

package bots

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddProfileToBot implements AddProfileToBot operation.
	//
	// Привязать профиль к боту.
	//
	// PUT /api/v1/bots/{botId}/profiles/{profileId}
	AddProfileToBot(ctx context.Context, params AddProfileToBotParams) (AddProfileToBotRes, error)
	// CreateBot implements CreateBot operation.
	//
	// Создать нового бота.
	//
	// POST /api/v1/bots
	CreateBot(ctx context.Context, req *BotInput) (CreateBotRes, error)
	// DeleteBotById implements DeleteBotById operation.
	//
	// Удалить бота по ID.
	//
	// DELETE /api/v1/bots/{botId}
	DeleteBotById(ctx context.Context, params DeleteBotByIdParams) (DeleteBotByIdRes, error)
	// GetBotById implements GetBotById operation.
	//
	// Получить бота по ID.
	//
	// GET /api/v1/bots/{botId}
	GetBotById(ctx context.Context, params GetBotByIdParams) (GetBotByIdRes, error)
	// GetBotProfiles implements GetBotProfiles operation.
	//
	// Получить список профилей, привязанных к боту.
	//
	// GET /api/v1/bots/{botId}/profiles
	GetBotProfiles(ctx context.Context, params GetBotProfilesParams) (GetBotProfilesRes, error)
	// ListBots implements ListBots operation.
	//
	// Получить список своих ботов.
	//
	// GET /api/v1/bots
	ListBots(ctx context.Context) (ListBotsRes, error)
	// RemoveProfileFromBot implements RemoveProfileFromBot operation.
	//
	// Отвязать профиль от бота.
	//
	// DELETE /api/v1/bots/{botId}/profiles/{profileId}
	RemoveProfileFromBot(ctx context.Context, params RemoveProfileFromBotParams) (RemoveProfileFromBotRes, error)
	// UpdateBotById implements UpdateBotById operation.
	//
	// Полностью обновить бота по ID.
	//
	// PUT /api/v1/bots/{botId}
	UpdateBotById(ctx context.Context, req *BotInput, params UpdateBotByIdParams) (UpdateBotByIdRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
