// Code generated by ogen, DO NOT EDIT.

package bots

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddProfileToBot implements addProfileToBot operation.
	//
	// Привязать профиль к боту.
	//
	// PUT /bots/{botId}/profiles/{profileId}
	AddProfileToBot(ctx context.Context, params AddProfileToBotParams) (AddProfileToBotRes, error)
	// CreateMyBot implements createMyBot operation.
	//
	// Создать нового бота.
	//
	// POST /bots
	CreateMyBot(ctx context.Context, req *BotInput) (CreateMyBotRes, error)
	// CreateTaskForBotWithProfile implements createTaskForBotWithProfile operation.
	//
	// Создать задачу для бота с конкретным профилем.
	//
	// POST /bots/{botId}/profiles/{profileId}/tasks
	CreateTaskForBotWithProfile(ctx context.Context, req *TaskInput, params CreateTaskForBotWithProfileParams) (CreateTaskForBotWithProfileRes, error)
	// DeleteBotById implements deleteBotById operation.
	//
	// Удалить бота по ID.
	//
	// DELETE /bots/{botId}
	DeleteBotById(ctx context.Context, params DeleteBotByIdParams) (DeleteBotByIdRes, error)
	// GetBotById implements getBotById operation.
	//
	// Получить бота по ID.
	//
	// GET /bots/{botId}
	GetBotById(ctx context.Context, params GetBotByIdParams) (GetBotByIdRes, error)
	// GetBotProfiles implements getBotProfiles operation.
	//
	// Получить список профилей, привязанных к боту.
	//
	// GET /bots/{botId}/profiles
	GetBotProfiles(ctx context.Context, params GetBotProfilesParams) (GetBotProfilesRes, error)
	// GetTaskById implements getTaskById operation.
	//
	// Получить статус задачи по ID.
	//
	// GET /tasks/{taskId}
	GetTaskById(ctx context.Context, params GetTaskByIdParams) (GetTaskByIdRes, error)
	// ListMyBots implements listMyBots operation.
	//
	// Получить список своих ботов.
	//
	// GET /bots
	ListMyBots(ctx context.Context, params ListMyBotsParams) (ListMyBotsRes, error)
	// RemoveProfileFromBot implements removeProfileFromBot operation.
	//
	// Отвязать профиль от бота.
	//
	// DELETE /bots/{botId}/profiles/{profileId}
	RemoveProfileFromBot(ctx context.Context, params RemoveProfileFromBotParams) (RemoveProfileFromBotRes, error)
	// UpdateBotById implements updateBotById operation.
	//
	// Полностью обновить бота по ID.
	//
	// PUT /bots/{botId}
	UpdateBotById(ctx context.Context, req *BotInput, params UpdateBotByIdParams) (UpdateBotByIdRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
